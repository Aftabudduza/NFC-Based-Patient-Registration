//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TagService.BO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TagEntities : DbContext
    {
        public TagEntities()
            : base("name=eTagEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Child> Child { get; set; }
        public virtual DbSet<ContactInformation> ContactInformation { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Master> Master { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<UserLog_Data> UserLog_Data { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<GlobalID> GlobalID { get; set; }
        public virtual DbSet<Version> Version { get; set; }
    
        public virtual int SP_GetID(string objectID, string itemID, Nullable<int> iDForYear, Nullable<int> iDForMonth, Nullable<System.DateTime> iDForDate, ObjectParameter newID)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var iDForYearParameter = iDForYear.HasValue ?
                new ObjectParameter("IDForYear", iDForYear) :
                new ObjectParameter("IDForYear", typeof(int));
    
            var iDForMonthParameter = iDForMonth.HasValue ?
                new ObjectParameter("IDForMonth", iDForMonth) :
                new ObjectParameter("IDForMonth", typeof(int));
    
            var iDForDateParameter = iDForDate.HasValue ?
                new ObjectParameter("IDForDate", iDForDate) :
                new ObjectParameter("IDForDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetID", objectIDParameter, itemIDParameter, iDForYearParameter, iDForMonthParameter, iDForDateParameter, newID);
        }
    
        public virtual ObjectResult<usp_getPhoneNoByAutoComplete_Result> usp_getPhoneNoByAutoComplete(string autocompleteText, string groupCodeFor)
        {
            var autocompleteTextParameter = autocompleteText != null ?
                new ObjectParameter("autocompleteText", autocompleteText) :
                new ObjectParameter("autocompleteText", typeof(string));
    
            var groupCodeForParameter = groupCodeFor != null ?
                new ObjectParameter("GroupCodeFor", groupCodeFor) :
                new ObjectParameter("GroupCodeFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPhoneNoByAutoComplete_Result>("usp_getPhoneNoByAutoComplete", autocompleteTextParameter, groupCodeForParameter);
        }
    
        public virtual int usp_UpdateUserProfileEmailAndPassword(string password, string email, string mobileNo)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserProfileEmailAndPassword", passwordParameter, emailParameter, mobileNoParameter);
        }
    }
}
